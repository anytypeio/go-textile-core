syntax = "proto3";
package pb;

message Empty {}

// HostConfig is the config file shared from the Bot to the host on init
message HostConfig {
    string name = 1;
    string id = 2;
    string release_version = 3;
    string release_hash = 4;
    map<string, string> params = 5;
}

// Response is the response for each request to a Bot
message BotResponse {
    int32 status = 1;
    bytes body = 2;
    // allows bots to set response types dynamically
    string content_type = 3;
}

// ClientConfig are the host managed elements shared with the client
message ClientConfig {
    uint32 bot_store_server = 1; 
    uint32 ipfs_handler_server = 2; 
    map<string, string> params = 3;
}

// APIRequest containing only a data request [GET, DELETE]
message APIRequest {
    bytes data = 1;
    ClientConfig setup = 2;
}

// APIRequestB containing only a body [POST, PUT]
message APIRequestB {
    bytes data = 1;
    bytes body = 2;
    ClientConfig setup = 3;
}

message Success {
    bool success = 1;
}

message ByteData {
    bytes data = 1;
}

// IPFSPin content hash // path and an optional ("" if nil) key for decryption
message IPFSPin {
    string hash = 1;
    string key = 2;
}

message KeyValResponse {
    // The value written at this Key
    bytes data = 1;
    // The bot's release version when value was last updated (allowing migrations)
    int32 version = 2;
}

message SetByKey {
    string key = 1;
    bytes data = 2;
}

message ByKey {
    string key = 1;
}

message GetData {
    string path = 1;
    string key = 2;
}

message AddData {
    bytes data = 1;
    bool encrypt = 2;
}

// BotStore is an interface that should be provided by the Cafe to get/set to a storage backend
service BotStore {
	// TODO: stored data []byte might be better as json or json string objects?
	rpc Get(ByKey) returns (KeyValResponse);
	rpc Set(SetByKey) returns (Success);
	rpc Delete(ByKey) returns (Success);
	// TODO: add cleanup/cron method
}

// IpfsHandler is an interface to the gateway method to fetch + decrypt content
service IpfsHandler {
    rpc Get(GetData) returns (ByteData);
    rpc Add(AddData) returns (IPFSPin);
}

// Botservice is the proposed general interface that a Bot should conform to
// This could ultimately live in the cafe or in textile-core
service Botservice {
	rpc Post(APIRequestB) returns (BotResponse);
	rpc Get(APIRequest) returns (BotResponse);
	rpc Put(APIRequestB) returns (BotResponse);
	rpc Delete(APIRequest) returns (BotResponse);
	// TODO: add cleanup/cron entry
}

// ActiveBot is the basic setup information about a running bot
message ActiveBot {
    string id                  = 1;
    string name                = 2;
    map<string, string> params = 3;
}

// ActiveBotList a list of ActiveBot
message ActiveBotList {
    repeated ActiveBot items = 1;
}
