// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: threads.proto

package threads_pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Node_Type int32

const (
	Node_INVITE Node_Type = 0
	Node_JOIN   Node_Type = 1
	Node_LEAVE  Node_Type = 2
	Node_WRITE  Node_Type = 3
	Node_REACT  Node_Type = 4
	Node_REMOVE Node_Type = 5
)

var Node_Type_name = map[int32]string{
	0: "INVITE",
	1: "JOIN",
	2: "LEAVE",
	3: "WRITE",
	4: "REACT",
	5: "REMOVE",
}

var Node_Type_value = map[string]int32{
	"INVITE": 0,
	"JOIN":   1,
	"LEAVE":  2,
	"WRITE":  3,
	"REACT":  4,
	"REMOVE": 5,
}

func (x Node_Type) String() string {
	return proto.EnumName(Node_Type_name, int32(x))
}

func (Node_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{2, 0}
}

type Node_Status int32

const (
	Node_READY   Node_Status = 0
	Node_QUEUED  Node_Status = 1
	Node_PENDING Node_Status = 2
)

var Node_Status_name = map[int32]string{
	0: "READY",
	1: "QUEUED",
	2: "PENDING",
}

var Node_Status_value = map[string]int32{
	"READY":   0,
	"QUEUED":  1,
	"PENDING": 2,
}

func (x Node_Status) String() string {
	return proto.EnumName(Node_Status_name, int32(x))
}

func (Node_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{2, 1}
}

type Thread struct {
	ID    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key   []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Name  string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Heads []string `protobuf:"bytes,4,rep,name=heads,proto3" json:"heads,omitempty"`
}

func (m *Thread) Reset()         { *m = Thread{} }
func (m *Thread) String() string { return proto.CompactTextString(m) }
func (*Thread) ProtoMessage()    {}
func (*Thread) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{0}
}
func (m *Thread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Thread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Thread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Thread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thread.Merge(m, src)
}
func (m *Thread) XXX_Size() int {
	return m.Size()
}
func (m *Thread) XXX_DiscardUnknown() {
	xxx_messageInfo_Thread.DiscardUnknown(m)
}

var xxx_messageInfo_Thread proto.InternalMessageInfo

func (m *Thread) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Thread) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Thread) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Thread) GetHeads() []string {
	if m != nil {
		return m.Heads
	}
	return nil
}

type Threads struct {
	Items []Thread `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
}

func (m *Threads) Reset()         { *m = Threads{} }
func (m *Threads) String() string { return proto.CompactTextString(m) }
func (*Threads) ProtoMessage()    {}
func (*Threads) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{1}
}
func (m *Threads) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Threads) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Threads.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Threads) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Threads.Merge(m, src)
}
func (m *Threads) XXX_Size() int {
	return m.Size()
}
func (m *Threads) XXX_DiscardUnknown() {
	xxx_messageInfo_Threads.DiscardUnknown(m)
}

var xxx_messageInfo_Threads proto.InternalMessageInfo

func (m *Threads) GetItems() []Thread {
	if m != nil {
		return m.Items
	}
	return nil
}

type Node struct {
	ID       string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Thread   string      `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
	Target   string      `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Author   string      `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Type     Node_Type   `protobuf:"varint,5,opt,name=type,proto3,enum=threads.pb.Node_Type" json:"type,omitempty"`
	Date     time.Time   `protobuf:"bytes,6,opt,name=date,proto3,stdtime" json:"date"`
	Status   Node_Status `protobuf:"varint,7,opt,name=status,proto3,enum=threads.pb.Node_Status" json:"status,omitempty"`
	Attempts int32       `protobuf:"varint,8,opt,name=attempts,proto3" json:"attempts,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{2}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Node) GetThread() string {
	if m != nil {
		return m.Thread
	}
	return ""
}

func (m *Node) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Node) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Node) GetType() Node_Type {
	if m != nil {
		return m.Type
	}
	return Node_INVITE
}

func (m *Node) GetDate() time.Time {
	if m != nil {
		return m.Date
	}
	return time.Time{}
}

func (m *Node) GetStatus() Node_Status {
	if m != nil {
		return m.Status
	}
	return Node_READY
}

func (m *Node) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

type Nodes struct {
	Items []Node `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{3}
}
func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return m.Size()
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetItems() []Node {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterEnum("threads.pb.Node_Type", Node_Type_name, Node_Type_value)
	proto.RegisterEnum("threads.pb.Node_Status", Node_Status_name, Node_Status_value)
	proto.RegisterType((*Thread)(nil), "threads.pb.Thread")
	proto.RegisterType((*Threads)(nil), "threads.pb.Threads")
	proto.RegisterType((*Node)(nil), "threads.pb.Node")
	proto.RegisterType((*Nodes)(nil), "threads.pb.Nodes")
}

func init() { proto.RegisterFile("threads.proto", fileDescriptor_f2ba358bb2150022) }

var fileDescriptor_f2ba358bb2150022 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xbd, 0xf6, 0xda, 0x4d, 0x26, 0x80, 0x56, 0x2b, 0x28, 0xab, 0x1c, 0x1c, 0xcb, 0x27,
	0x23, 0x15, 0x47, 0x0a, 0x42, 0x82, 0x63, 0x43, 0x2c, 0x64, 0x04, 0x29, 0x2c, 0x69, 0x10, 0x12,
	0x17, 0x87, 0x2c, 0x4e, 0x04, 0xc6, 0x51, 0xbc, 0x39, 0xe4, 0x2d, 0xca, 0x1b, 0x71, 0xec, 0xb1,
	0x47, 0x4e, 0x05, 0x9c, 0x97, 0xe0, 0x88, 0x76, 0xd7, 0x6d, 0x29, 0x88, 0xdb, 0xfc, 0x33, 0xdf,
	0xce, 0xfc, 0xb3, 0x03, 0x37, 0xe5, 0x62, 0x2d, 0xb2, 0x79, 0x15, 0xaf, 0xd6, 0xa5, 0x2c, 0x29,
	0x5c, 0xca, 0x59, 0xb7, 0x97, 0x97, 0x65, 0xfe, 0x49, 0xf4, 0x75, 0x65, 0xb6, 0xf9, 0xd0, 0x97,
	0xcb, 0x42, 0x54, 0x32, 0x2b, 0x56, 0x06, 0xee, 0xde, 0xcf, 0x97, 0x72, 0xb1, 0x99, 0xc5, 0xef,
	0xcb, 0xa2, 0x9f, 0x97, 0x79, 0x79, 0x45, 0x2a, 0xa5, 0x85, 0x8e, 0x0c, 0x1e, 0xbe, 0x03, 0x6f,
	0xa2, 0xbb, 0xd3, 0x7d, 0xb0, 0x97, 0x73, 0x86, 0x02, 0x14, 0xb5, 0x87, 0x5e, 0x7d, 0xde, 0xb3,
	0xd3, 0x11, 0xb7, 0x97, 0x73, 0x4a, 0xc0, 0xf9, 0x28, 0xb6, 0xcc, 0x0e, 0x50, 0x74, 0x83, 0xab,
	0x90, 0x52, 0xc0, 0x9f, 0xb3, 0x42, 0x30, 0x47, 0xb1, 0x5c, 0xc7, 0xf4, 0x36, 0xb8, 0x0b, 0xe5,
	0x91, 0xe1, 0xc0, 0x89, 0xda, 0xdc, 0x88, 0xf0, 0x31, 0xec, 0x99, 0xee, 0x15, 0x8d, 0xc1, 0x5d,
	0x4a, 0x51, 0x54, 0x0c, 0x05, 0x4e, 0xd4, 0x19, 0xd0, 0xf8, 0x6a, 0xa9, 0xd8, 0x30, 0x43, 0x7c,
	0x7a, 0xde, 0xb3, 0xb8, 0xc1, 0xc2, 0x2f, 0x0e, 0xe0, 0x71, 0x39, 0x17, 0xff, 0xf5, 0xb5, 0x0f,
	0x9e, 0x69, 0xa1, 0xad, 0xb5, 0x79, 0xa3, 0x74, 0x3e, 0x5b, 0xe7, 0x42, 0x36, 0xfe, 0x1a, 0xa5,
	0xf2, 0xd9, 0x46, 0x2e, 0xca, 0x35, 0xc3, 0x26, 0x6f, 0x14, 0xbd, 0x07, 0x58, 0x6e, 0x57, 0x82,
	0xb9, 0x01, 0x8a, 0x6e, 0x0d, 0xee, 0xfc, 0xe9, 0x4b, 0xcd, 0x8f, 0x27, 0xdb, 0x95, 0xe0, 0x1a,
	0xa1, 0x8f, 0x00, 0xcf, 0x33, 0x29, 0x98, 0x17, 0xa0, 0xa8, 0x33, 0xe8, 0xc6, 0xe6, 0x16, 0xf1,
	0xc5, 0x0f, 0xc7, 0x93, 0x8b, 0x5b, 0x0c, 0x5b, 0x6a, 0x95, 0x93, 0xef, 0x3d, 0xc4, 0xf5, 0x0b,
	0xda, 0x07, 0xaf, 0x92, 0x99, 0xdc, 0x54, 0x6c, 0x4f, 0x8f, 0xb9, 0xfb, 0xcf, 0x98, 0xd7, 0xba,
	0xcc, 0x1b, 0x8c, 0x76, 0xa1, 0x95, 0x49, 0x29, 0x8a, 0x95, 0xac, 0x58, 0x2b, 0x40, 0x91, 0xcb,
	0x2f, 0x75, 0x98, 0x02, 0x56, 0xa6, 0x28, 0x80, 0x97, 0x8e, 0xa7, 0xe9, 0x24, 0x21, 0x16, 0x6d,
	0x01, 0x7e, 0x76, 0x94, 0x8e, 0x09, 0xa2, 0x6d, 0x70, 0x9f, 0x27, 0x87, 0xd3, 0x84, 0xd8, 0x2a,
	0x7c, 0xc3, 0x55, 0xdd, 0x51, 0x21, 0x4f, 0x0e, 0x9f, 0x4c, 0x08, 0x56, 0xcf, 0x78, 0xf2, 0xe2,
	0x68, 0x9a, 0x10, 0x37, 0x3c, 0x00, 0xcf, 0x0c, 0x6e, 0x80, 0xd1, 0x5b, 0x62, 0x29, 0xe0, 0xd5,
	0x71, 0x72, 0x9c, 0x8c, 0x08, 0xa2, 0x1d, 0xd8, 0x7b, 0x99, 0x8c, 0x47, 0xe9, 0xf8, 0x29, 0xb1,
	0xc3, 0x87, 0xe0, 0x2a, 0xaf, 0x15, 0x3d, 0xb8, 0x7e, 0x4c, 0xf2, 0xf7, 0x36, 0xd7, 0x4e, 0x39,
	0x0c, 0x7e, 0xfd, 0xf4, 0xd1, 0xd7, 0xda, 0x47, 0xa7, 0xb5, 0x8f, 0xce, 0x6a, 0x1f, 0xfd, 0xa8,
	0x7d, 0x74, 0xb2, 0xf3, 0xad, 0xb3, 0x9d, 0x6f, 0x7d, 0xdb, 0xf9, 0xd6, 0xcc, 0xd3, 0x5f, 0xf8,
	0xe0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xc3, 0xad, 0xcf, 0xf9, 0x02, 0x00, 0x00,
}

func (m *Thread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Thread) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Heads) > 0 {
		for _, s := range m.Heads {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Threads) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Threads) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintThreads(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Thread) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.Thread)))
		i += copy(dAtA[i:], m.Thread)
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.Type))
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintThreads(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Status != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.Status))
	}
	if m.Attempts != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.Attempts))
	}
	return i, nil
}

func (m *Nodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nodes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintThreads(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintThreads(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedThread(r randyThreads, easy bool) *Thread {
	this := &Thread{}
	this.ID = string(randStringThreads(r))
	v1 := r.Intn(100)
	this.Key = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	this.Name = string(randStringThreads(r))
	v2 := r.Intn(10)
	this.Heads = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.Heads[i] = string(randStringThreads(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedThreads(r randyThreads, easy bool) *Threads {
	this := &Threads{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Items = make([]Thread, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedThread(r, easy)
			this.Items[i] = *v4
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNode(r randyThreads, easy bool) *Node {
	this := &Node{}
	this.ID = string(randStringThreads(r))
	this.Thread = string(randStringThreads(r))
	this.Target = string(randStringThreads(r))
	this.Author = string(randStringThreads(r))
	this.Type = Node_Type([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	v5 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Date = *v5
	this.Status = Node_Status([]int32{0, 1, 2}[r.Intn(3)])
	this.Attempts = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Attempts *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNodes(r randyThreads, easy bool) *Nodes {
	this := &Nodes{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Items = make([]Node, v6)
		for i := 0; i < v6; i++ {
			v7 := NewPopulatedNode(r, easy)
			this.Items[i] = *v7
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyThreads interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneThreads(r randyThreads) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringThreads(r randyThreads) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneThreads(r)
	}
	return string(tmps)
}
func randUnrecognizedThreads(r randyThreads, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldThreads(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldThreads(dAtA []byte, r randyThreads, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateThreads(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Thread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	if len(m.Heads) > 0 {
		for _, s := range m.Heads {
			l = len(s)
			n += 1 + l + sovThreads(uint64(l))
		}
	}
	return n
}

func (m *Threads) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovThreads(uint64(l))
		}
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.Thread)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovThreads(uint64(m.Type))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovThreads(uint64(l))
	if m.Status != 0 {
		n += 1 + sovThreads(uint64(m.Status))
	}
	if m.Attempts != 0 {
		n += 1 + sovThreads(uint64(m.Attempts))
	}
	return n
}

func (m *Nodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovThreads(uint64(l))
		}
	}
	return n
}

func sovThreads(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozThreads(x uint64) (n int) {
	return sovThreads(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Thread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Thread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Thread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heads = append(m.Heads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Threads) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Threads: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Threads: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Thread{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thread = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Node_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Node_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempts", wireType)
			}
			m.Attempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Node{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThreads(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthThreads
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthThreads
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowThreads
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipThreads(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthThreads
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthThreads = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThreads   = fmt.Errorf("proto: integer overflow")
)
